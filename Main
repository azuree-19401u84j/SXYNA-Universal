-- Boot the Rayfield Library with fallback and error handling
local function loadRayfield()
    local urls = {
        "https://sirius.menu/rayfield",
        "https://raw.githubusercontent.com/shlexware/Rayfield/main/source", -- Fallback
    }
    for _, url in ipairs(urls) do
        local ok, result = pcall(function()
            return loadstring(game:HttpGet(url, true))()
        end)
        if ok and result then
            return result
        end
    end
    return nil
end

local Rayfield = loadRayfield()
if not Rayfield then
    warn("SXYNA: Failed to load Rayfield from all sources. Your executor may be blocking HTTP or the sources are unavailable.")
    return
end

-- Roblox services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Helpers
local function getHumanoid()
    local plr = Players.LocalPlayer
    if not plr then return nil end
    local char = plr.Character or plr.CharacterAdded:Wait()
    if not char then return nil end
    return char:FindFirstChildOfClass("Humanoid")
end

-- File helpers
local THEME_SAVE_PATH = "SXYNA/theme.txt"
local function safeIsFile(path)
    local ok, res = pcall(function() return isfile and isfile(path) end)
    return ok and res == true
end
local function safeReadFile(path)
    local ok, res = pcall(function() return readfile and readfile(path) end)
    if ok and type(res) == "string" and #res > 0 then return res end
    return nil
end
local function safeWriteFile(path, content)
    pcall(function()
        if makefolder then pcall(function() makefolder("SXYNA") end) end
        if writefile then writefile(path, content) end
    end)
end

-- Validate theme
local allowedThemes = {
    Default = true, AmberGlow = true, Amethyst = true,
    Bloom = true, DarkBlue = true, Green = true,
    Light = true, Ocean = true, Serenity = true
}
local initialTheme = _G.SXYNA_THEME or (safeIsFile(THEME_SAVE_PATH) and safeReadFile(THEME_SAVE_PATH)) or "Default"
if not allowedThemes[initialTheme] then
    initialTheme = "Default"
end

-- Create The Window
warn("SXYNA: Creating window...")
local ok_window, Window = pcall(function()
    return Rayfield:CreateWindow({
        Name = "SXYNA Universal Panel",
        Icon = 0,
        LoadingTitle = "SXYNA",
        LoadingSubtitle = "v1.0.1",
        ShowText = "SXYNA",
        Theme = initialTheme,

        -- âœ… FIX: Use correct keybind format
        Keybind = { Enum.KeyCode.P },

        DisableRayfieldPrompts = true,
        DisableBuildWarnings = true,

        ConfigurationSaving = {
            Enabled = true,
            FolderName = "SXYNA",
            FileName = "SXYNA",
        },

        Discord = {
            Enabled = false,
            Invite = "noinvitelink",
            RememberJoins = true,
        },

        KeySystem = false,
        KeySettings = {
            Title = "Untitled",
            Subtitle = "Key System",
            Note = "No method of obtaining the key is provided",
            FileName = "Key",
            SaveKey = true,
            GrabKeyFromSite = false,
            Key = {"Hello"},
        }
    })
end)
if not ok_window then
    warn("SXYNA: Failed to create window: " .. tostring(Window))
    return
end

-- Notify load
pcall(function()
    Rayfield:Notify({
        Title = "Welcome To The Menu.",
        Content = "The UI Has Successfully Been Loaded. Press [P] To Open The Menu. Theme: " .. tostring(initialTheme),
        Duration = 5,
        Image = 4483362458,
    })
end)

-- === PLAYER TAB ===
local PlayerTab = Window:CreateTab("Player", 4483362458)

-- Speed Slider
PlayerTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {16, 500},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 16,
    Flag = "WalkSpeed",
    Callback = function(Value)
        local hum = getHumanoid()
        if hum then
            hum.WalkSpeed = Value
        end
    end,
})

-- Jump Power Slider
PlayerTab:CreateSlider({
    Name = "JumpPower",
    Range = {50, 500},
    Increment = 5,
    Suffix = "Power",
    CurrentValue = 50,
    Flag = "JumpPower",
    Callback = function(Value)
        local hum = getHumanoid()
        if hum then
            hum.UseJumpPower = true
            hum.JumpPower = Value
        end
    end,
})

-- Fly Toggle
local flying = false
local flyConn
PlayerTab:CreateToggle({
    Name = "Fly",
    CurrentValue = false,
    Flag = "FlyToggle",
    Callback = function(state)
        flying = state
        local plr = Players.LocalPlayer
        local char = plr.Character or plr.CharacterAdded:Wait()
        local hum = getHumanoid()

        if flying then
            local root = char:WaitForChild("HumanoidRootPart")
            flyConn = RunService.RenderStepped:Connect(function()
                local camCF = workspace.CurrentCamera.CFrame
                local moveDir = Vector3.new()
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                    moveDir += camCF.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                    moveDir -= camCF.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                    moveDir -= camCF.RightVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                    moveDir += camCF.RightVector
                end
                root.Velocity = moveDir * 80
                hum.PlatformStand = true
            end)
        else
            if flyConn then flyConn:Disconnect() end
            hum.PlatformStand = false
        end
    end,
})

-- Noclip Toggle
local noclip = false
local noclipConn
PlayerTab:CreateToggle({
    Name = "Noclip",
    CurrentValue = false,
    Flag = "NoclipToggle",
    Callback = function(state)
        noclip = state
        local plr = Players.LocalPlayer
        local char = plr.Character or plr.CharacterAdded:Wait()

        if noclip then
            noclipConn = RunService.Stepped:Connect(function()
                for _, part in ipairs(char:GetDescendants()) do
                    if part:IsA("BasePart") and part.CanCollide then
                        part.CanCollide = false
                    end
                end
            end)
        else
            if noclipConn then noclipConn:Disconnect() end
            for _, part in ipairs(char:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end,
})

-- FOV Slider
PlayerTab:CreateSlider({
    Name = "Field of View",
    Range = {70, 120},
    Increment = 1,
    Suffix = "FOV",
    CurrentValue = 70,
    Flag = "FOVSlider",
    Callback = function(Value)
        workspace.CurrentCamera.FieldOfView = Value
    end,
})

-- === TELEPORT & FUN TAB ===
local TeleportTab = Window:CreateTab("Teleport & Fun", 4483362458)

-- Player Selector
local selectedPlayer = nil
local function getPlayers()
    local list = {}
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= Players.LocalPlayer then
            table.insert(list, plr.Name)
        end
    end
    return list
end

local PlayerDropdown = TeleportTab:CreateDropdown({
    Name = "Select Player",
    Options = getPlayers(),
    CurrentOption = {},
    MultipleOptions = false,
    Flag = "TeleportTarget",
    Callback = function(option)
        if type(option) == "table" then
            selectedPlayer = option[1]
        else
            selectedPlayer = option
        end
    end,
})

TeleportTab:CreateButton({
    Name = "Refresh Player List",
    Callback = function()
        PlayerDropdown:Set(getPlayers())
    end,
})

-- Teleport to Player
TeleportTab:CreateButton({
    Name = "Teleport To Player",
    Callback = function()
        if not selectedPlayer then return end
        local me = Players.LocalPlayer
        local target = Players:FindFirstChild(selectedPlayer)
        if me and me.Character and target and target.Character then
            local myHRP = me.Character:FindFirstChild("HumanoidRootPart")
            local tHRP = target.Character:FindFirstChild("HumanoidRootPart")
            if myHRP and tHRP then
                myHRP.CFrame = tHRP.CFrame * CFrame.new(0, 0, -3)
            end
        end
    end,
})

-- Teleport Random Player
TeleportTab:CreateButton({
    Name = "Teleport To Random Player",
    Callback = function()
        local me = Players.LocalPlayer
        local others = {}
        for _, plr in ipairs(Players:GetPlayers()) do
            if plr ~= me then
                table.insert(others, plr)
            end
        end
        if #others > 0 and me.Character then
            local randomPlr = others[math.random(1, #others)]
            if randomPlr.Character then
                local myHRP = me.Character:FindFirstChild("HumanoidRootPart")
                local tHRP = randomPlr.Character:FindFirstChild("HumanoidRootPart")
                if myHRP and tHRP then
                    myHRP.CFrame = tHRP.CFrame * CFrame.new(0, 0, -3)
                end
            end
        end
    end,
})

-- Orbit Player
local orbiting = false
local orbitConn
local orbitSpeed, orbitDistance, orbitHeight = 90, 8, 3

TeleportTab:CreateSlider({
    Name = "Orbit Speed",
    Range = {0, 720},
    Increment = 10,
    Suffix = "deg/s",
    CurrentValue = orbitSpeed,
    Callback = function(val) orbitSpeed = val end,
})

TeleportTab:CreateSlider({
    Name = "Orbit Distance",
    Range = {1, 50},
    Increment = 1,
    Suffix = "studs",
    CurrentValue = orbitDistance,
    Callback = function(val) orbitDistance = val end,
})

TeleportTab:CreateSlider({
    Name = "Orbit Height",
    Range = {0, 20},
    Increment = 1,
    Suffix = "studs",
    CurrentValue = orbitHeight,
    Callback = function(val) orbitHeight = val end,
})

TeleportTab:CreateToggle({
    Name = "Orbit Selected Player",
    CurrentValue = false,
    Callback = function(state)
        orbiting = state
        if orbiting then
            local angle = 0
            orbitConn = RunService.Heartbeat:Connect(function(dt)
                if not selectedPlayer then return end
                local me = Players.LocalPlayer
                local target = Players:FindFirstChild(selectedPlayer)
                if not (me and me.Character and target and target.Character) then return end

                local myHRP = me.Character:FindFirstChild("HumanoidRootPart")
                local tHRP = target.Character:FindFirstChild("HumanoidRootPart")
                if myHRP and tHRP then
                    angle += math.rad(orbitSpeed) * dt
                    local offset = Vector3.new(math.cos(angle) * orbitDistance, orbitHeight, math.sin(angle) * orbitDistance)
                    myHRP.CFrame = CFrame.new(tHRP.Position + offset, tHRP.Position)
                end
            end)
        else
            if orbitConn then orbitConn:Disconnect() end
        end
    end,
})

-- Fling Player
TeleportTab:CreateButton({
    Name = "Fling Selected Player",
    Callback = function()
        if not selectedPlayer then return end
        local me = Players.LocalPlayer
        local target = Players:FindFirstChild(selectedPlayer)
        if me and me.Character and target and target.Character then
            local myHRP = me.Character:FindFirstChild("HumanoidRootPart")
            local tHRP = target.Character:FindFirstChild("HumanoidRootPart")
            if myHRP and tHRP then
                myHRP.CFrame = tHRP.CFrame * CFrame.new(0, 0, -2)
                myHRP.AssemblyLinearVelocity = (tHRP.Position - myHRP.Position).Unit * 250 + Vector3.new(0,150,0)
            end
        end
    end,
})

