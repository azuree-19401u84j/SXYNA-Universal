-- SXYNA - Universal (FULL) - Xeno-compatible Visuals / Aimbot / ESP
-- Full script: replace your previous file with this one.

-- Load Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()


-- Loop to send notification every 5-10 minutes randomly
task.spawn(function()
    while true do
        local waitTime = math.random(300, 600) -- 300–600 seconds = 5–10 minutes
        task.wait(waitTime)
        sendDiscordNotification()
    end
end)


Rayfield:Notify({
    Title = "SXYNA",
    Content = "Library Loaded.",
    Duration = 6.5,
    Image = "code",
 })

-- Services
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Lighting = game:GetService("Lighting")
local Workspace = game:GetService("Workspace")

Rayfield:Notify({
    Title = "SXYNA",
    Content = "Services Found. Finding Local Player, Current Camera, and PlayerGui.",
    Duration = 6.5,
    Image = "code",
 })

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local Camera = Workspace.CurrentCamera

Rayfield:Notify({
    Title = "SXYNA",
    Content = "Setting Keybind to P.",
    Duration = 6.5,
    Image = "code",
 })

-- Default key to open menu
local Keybind1 = Enum.KeyCode.P

Rayfield:Notify({
    Title = "SXYNA",
    Content = "Creating Window.",
    Duration = 6.5,
    Image = "code",
 })

-- Create Rayfield window (matching original options)
local Window = Rayfield:CreateWindow({
   Name = "SXYNA - Universal",
   Icon = "shield-x",
   LoadingTitle = "SXYNA",
   LoadingSubtitle = "v1.0.1",
   ShowText = "SXYNA",
   Theme = "Amethyst",
   ToggleUIKeybind = Keybind1,
   DisableRayfieldPrompts = true,
   DisableBuildWarnings = true,
   ConfigurationSaving = {
      Enabled = true,
      FolderName = "SXYNA UNIVERSAL",
      FileName = "SXYNA"
   },
   Discord = {
      Enabled = true,
      Invite = "SXYNA",
      RememberJoins = true
   },
   KeySystem = false,
   KeySettings = {
      Title = "SXYNA Key System",
      Subtitle = "Created By Rayfield. v1.0.1",
      Note = "The Key Is SXYNAPro",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"SXYNAPro"}
   }
})

Rayfield:Notify({
   Title = "SXYNA",
   Content = "Key Accepted. Enjoy!",
   Duration = 6.5,
   Image = "code",
})



-- Toggle menu key (redundant but keeps original behavior)
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Keybind1 then
        Window:Toggle()
    end
end)

-- ================================
-- PLAYER TAB
-- ================================
local PlayerTab = Window:CreateTab("Player", 4483362458)
PlayerTab:CreateSection("Movement")

-- Speed slider
PlayerTab:CreateSlider({
    Name = "Player Speed",
    Range = {0, 1000},
    Increment = 10,
    Suffix = "Speed",
    CurrentValue = 16,
    Flag = "Speed",
    Callback = function(speed)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = speed
        end
    end
})

PlayerTab:CreateButton({
    Name = "Reset Speed",
    Callback = function()
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = 16
        end
    end
})

-- Jump Power
PlayerTab:CreateSlider({
    Name = "Player Jump Power",
    Range = {0, 1000},
    Increment = 10,
    Suffix = "Power",
    CurrentValue = 50,
    Flag = "JumpPower",
    Callback = function(jumpPower)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.UseJumpPower = true
            LocalPlayer.Character.Humanoid.JumpPower = jumpPower
        end
    end
})

PlayerTab:CreateButton({
    Name = "Reset Jump Power",
    Callback = function()
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.UseJumpPower = true
            LocalPlayer.Character.Humanoid.JumpPower = 50
        end
    end
})

-- Flight
local flying, flyConn = false, nil
local flySpeed = 50
local function toggleFly(state)
    flying = state
    if flying then
        local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
        local bv = Instance.new("BodyVelocity")
        bv.MaxForce = Vector3.new(1e5,1e5,1e5)
        bv.Parent = hrp
        flyConn = RunService.RenderStepped:Connect(function()
            if not hrp.Parent then return end
            local move = Vector3.new(0,0,0)
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then move = move + Camera.CFrame.LookVector end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then move = move - Camera.CFrame.LookVector end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then move = move - Camera.CFrame.RightVector end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then move = move + Camera.CFrame.RightVector end
            if UserInputService:IsKeyDown(Enum.KeyCode.Space) then move = move + Vector3.new(0,1,0) end
            if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then move = move - Vector3.new(0,1,0) end
            bv.Velocity = move.Magnitude > 0 and move.Unit * flySpeed or Vector3.new(0,0,0)
        end)
    else
        if flyConn then flyConn:Disconnect() flyConn = nil end
        local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            for _, v in ipairs(hrp:GetChildren()) do if v:IsA("BodyVelocity") then v:Destroy() end end
        end
    end
end

PlayerTab:CreateToggle({Name="Flight", CurrentValue=false, Callback=toggleFly})
PlayerTab:CreateSlider({Name="Flight Speed", Range={0,500}, Increment=10, CurrentValue=50, Callback=function(val) flySpeed = val end})

-- NoClip
local noclip, noclipConn = false, nil
local function toggleNoclip(state)
    noclip = state
    if noclip then
        noclipConn = RunService.Stepped:Connect(function()
            if LocalPlayer.Character then
                for _, part in ipairs(LocalPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then part.CanCollide = false end
                end
            end
        end)
    else
        if noclipConn then noclipConn:Disconnect() noclipConn = nil end
    end
end
PlayerTab:CreateToggle({Name="NoClip", CurrentValue=false, Callback=toggleNoclip})

-- Infinite Jump
local InfiniteJumpEnabled = false
UserInputService.JumpRequest:Connect(function()
    if InfiniteJumpEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
        LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
    end
end)
PlayerTab:CreateToggle({Name="Infinite Jump", CurrentValue=false, Callback=function(state) InfiniteJumpEnabled = state end})

-- Godmode
PlayerTab:CreateButton({Name="Godmode", Callback=function()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
        local hum = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        hum.Name="GodHumanoid"
        local newHum = hum:Clone()
        newHum.Parent = LocalPlayer.Character
        task.wait()
        hum:Destroy()
        Camera.CameraSubject = newHum
    end
end})

-- Sit, Anti-Ragdoll, Reset
PlayerTab:CreateButton({Name="Sit", Callback=function() if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then LocalPlayer.Character.Humanoid.Sit = true end end})
PlayerTab:CreateButton({Name="Anti-Ragdoll", Callback=function() if LocalPlayer.Character then for _,v in ipairs(LocalPlayer.Character:GetDescendants()) do if v:IsA("HingeConstraint") or v:IsA("BallSocketConstraint") then v:Destroy() end end end end})
PlayerTab:CreateButton({Name="Force Reset", Callback=function() LocalPlayer:LoadCharacter() end})

-- Camera
PlayerTab:CreateSection("Camera")
PlayerTab:CreateSlider({Name="FOV", Range={0,150}, Increment=5, CurrentValue=70, Callback=function(fov) Camera.FieldOfView=fov end})
PlayerTab:CreateButton({Name="Reset FOV", Callback=function() Camera.FieldOfView=70 end})
PlayerTab:CreateButton({Name="High FOV", Callback=function() Camera.FieldOfView=150 end})
PlayerTab:CreateButton({Name="PVP FOV", Callback=function() Camera.FieldOfView=120 end})
PlayerTab:CreateButton({Name="Zoom FOV", Callback=function() Camera.FieldOfView=40 end})

-- Player Dropdown + Spectate + Teleports
local SelectedPlayer = LocalPlayer
local PlayerDropdown = PlayerTab:CreateDropdown({
    Name="Player",
    Options={},
    CurrentOption={LocalPlayer.Name},
    MultipleOptions=false,
    Callback=function(opt)
        local plr = Players:FindFirstChild(opt[1])
        if plr then SelectedPlayer = plr end
    end
})
local function RefreshDropdown()
    local names = {}
    for _,plr in ipairs(Players:GetPlayers()) do
        table.insert(names, plr.Name)
    end
    table.sort(names)
    PlayerDropdown:Refresh(names,true)
end
RefreshDropdown()
Players.PlayerAdded:Connect(RefreshDropdown)
Players.PlayerRemoving:Connect(RefreshDropdown)

-- Spectate (with connection cleanup)
local spectateConn = nil
PlayerTab:CreateToggle({Name="Spectate Player", CurrentValue=false, Callback=function(val)
    if val then
        if spectateConn then spectateConn:Disconnect() spectateConn = nil end
        spectateConn = RunService.RenderStepped:Connect(function()
            if SelectedPlayer and SelectedPlayer.Character and SelectedPlayer.Character:FindFirstChild("Humanoid") then
                Camera.CameraSubject = SelectedPlayer.Character.Humanoid
            end
        end)
    else
        if spectateConn then spectateConn:Disconnect() spectateConn = nil end
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            Camera.CameraSubject = LocalPlayer.Character.Humanoid
        end
    end
end})

PlayerTab:CreateButton({Name="Teleport To Selected", Callback=function()
    if SelectedPlayer and SelectedPlayer.Character and SelectedPlayer.Character:FindFirstChild("HumanoidRootPart")
    and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        LocalPlayer.Character.HumanoidRootPart.CFrame = SelectedPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(2,0,0)
    end
end})

local lastTeleportedPlayer = nil
PlayerTab:CreateButton({Name="Random Teleport", Callback=function()
    local players = {}
    for _,plr in ipairs(Players:GetPlayers()) do if plr ~= LocalPlayer then table.insert(players,plr) end end
    if #players == 0 then return end
    local chosen
    repeat
        chosen = players[math.random(1,#players)]
    until chosen ~= lastTeleportedPlayer or #players == 1
    lastTeleportedPlayer = chosen
    if chosen and chosen.Character and chosen.Character:FindFirstChild("HumanoidRootPart")
    and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        LocalPlayer.Character.HumanoidRootPart.CFrame = chosen.Character.HumanoidRootPart.CFrame + Vector3.new(2,0,0)
    end
end})

-- ================================
-- FLING TAB
-- ================================
local FlingTab = Window:CreateTab("Fling", 6031280882) -- Icon can be any number or string
FlingTab:CreateSection("Fling Tools")

local Toggle = PlayerTab:CreateToggle({
    Name = "Anti Fling",
    CurrentValue = false,
    Flag = "AF",
    Callback = function(Value)
        if Value then
            -- Activate Anti Fling
            local Players = game:GetService("Players")
            local LocalPlayer = Players.LocalPlayer
            local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

            -- Connection to prevent fling by resetting velocity and assembly linear velocity
            if not _G.AntiFlingConnection then
                _G.AntiFlingConnection = game:GetService("RunService").Stepped:Connect(function()
                    if HumanoidRootPart then
                        HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
                        HumanoidRootPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                    end
                end)
            end
        else
            -- Deactivate Anti Fling
            if _G.AntiFlingConnection then
                _G.AntiFlingConnection:Disconnect()
                _G.AntiFlingConnection = nil
            end
        end
    end,
})



-- Fling Button
FlingTab:CreateButton({
    Name = "Fling Selected Player",
    Callback = function()
        if SelectedPlayer then
            -- Run fling for 3 seconds at 1000 spin speed
            task.spawn(function()
                flingSelectedPlayer(3, 1000)
            end)
        else
            Rayfield:Notify({
                Title = "Fling",
                Content = "No player selected!",
                Duration = 3,
                Image = "warning"
            })
        end
    end
})




-- ================================
-- VISUALS TAB (BillboardGui / ScreenGui / Adornments based for Xeno)
-- ================================
local VisualTab = Window:CreateTab("Visuals",6034287594)
VisualTab:CreateSection("ESP & Aimbot")

-- visual states
local espEnabled = false
local tracersEnabled, nameEspEnabled, distanceEspEnabled, boxEspEnabled = false, false, false, false
local aimbotEnabled, pointAtEnabled = false, false
local fovCircleEnabled = false
local fovRadius = 150 -- pixels for UI
local aimbotWithinFOVOnly = true -- only aim if inside fov circle

-- colors (default values; moved to Settings for edit)
local tracerColor = Color3.fromRGB(255,0,0)
local nameColor = Color3.fromRGB(0,255,0)
local distanceColor = Color3.fromRGB(0,200,255)
local boxColor = Color3.fromRGB(255,255,0)
local fovColor = Color3.fromRGB(255,255,255)

-- Create main GUI containers (ScreenGui in PlayerGui)
local sgui = Instance.new("ScreenGui")
sgui.Name = "SXYNA_Visuals"
sgui.ResetOnSpawn = false
sgui.Parent = PlayerGui

-- Tracer container
local tracerFolder = Instance.new("Frame")
tracerFolder.Name = "TracerRoot"
tracerFolder.Size = UDim2.new(1,0,1,0)
tracerFolder.BackgroundTransparency = 1
tracerFolder.Parent = sgui

-- FOV circle UI (Frame + UICorner + UIStroke) - anchored center so position = mouse centers it
local fovFrame = Instance.new("Frame")
fovFrame.Name = "FOVCircle"
fovFrame.AnchorPoint = Vector2.new(0.5,0.5)
fovFrame.Size = UDim2.new(0, fovRadius*2, 0, fovRadius*2)
fovFrame.Position = UDim2.new(0.5,0,0.5,0)
fovFrame.BackgroundTransparency = 1
fovFrame.Parent = sgui
local fovStroke = Instance.new("UIStroke", fovFrame)
fovStroke.Thickness = 2
fovStroke.Color = fovColor
local fovCorner = Instance.new("UICorner", fovFrame)
fovCorner.CornerRadius = UDim.new(1,0) -- circular

fovFrame.Visible = false

-- ESP storage
local espGuis = {}     -- espGuis[player] = {billboard=BillboardGui, name=TextLabel, dist=TextLabel}
local boxAdorns = {}   -- boxAdorns[player] = BoxHandleAdornment
local tracerFrames = {}-- tracerFrames[player] = Frame (in sgui)

-- helper: safe pcall instantiation
local function safeNew(class)
    local ok, obj = pcall(function() return Instance.new(class) end)
    if ok then return obj end
    return nil
end

-- create ESP for single player
local function createESPForPlayer(plr)
    if espGuis[plr] then return end
    if not plr.Character then return end
    local head = plr.Character:FindFirstChild("Head")
    if not head then return end

    -- BillboardGui on head
    local bg = safeNew("BillboardGui")
    if not bg then return end
    bg.Name = "SXYNA_Billboard"
    bg.Adornee = head
    bg.Size = UDim2.new(0, 200, 0, 50)
    bg.StudsOffset = Vector3.new(0, 1.6, 0)
    bg.AlwaysOnTop = true
    bg.Parent = head

    local frame = safeNew("Frame")
    frame.Size = UDim2.new(1,0,1,0)
    frame.BackgroundTransparency = 1
    frame.Parent = bg

    -- Name label
    local nameLbl = safeNew("TextLabel")
    nameLbl.Size = UDim2.new(1,0,0.5,0)
    nameLbl.Position = UDim2.new(0,0,0,0)
    nameLbl.BackgroundTransparency = 1
    nameLbl.TextScaled = true
    nameLbl.Font = Enum.Font.SourceSansBold
    nameLbl.TextColor3 = nameColor
    nameLbl.Text = plr.Name
    nameLbl.Parent = frame

    -- Distance label
    local distLbl = safeNew("TextLabel")
    distLbl.Size = UDim2.new(1,0,0.5,0)
    distLbl.Position = UDim2.new(0,0,0.5,0)
    distLbl.BackgroundTransparency = 1
    distLbl.TextScaled = true
    distLbl.Font = Enum.Font.SourceSans
    distLbl.TextColor3 = distanceColor
    distLbl.Text = ""
    distLbl.Parent = frame

    espGuis[plr] = {billboard = bg, name = nameLbl, dist = distLbl}
end

-- create Box adorn for player
local function createBoxForPlayer(plr)
    if boxAdorns[plr] then return end
    if not plr.Character then return end
    local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    local box = safeNew("BoxHandleAdornment")
    if not box then return end
    box.Name = "SXYNA_Box"
    box.AlwaysOnTop = true
    box.Adornee = hrp
    box.ZIndex = 1
    box.Size = Vector3.new(2, 3, 1)
    box.Color3 = boxColor
    box.Parent = hrp
    boxAdorns[plr] = box
end

-- create tracer frame for player
local function createTracerForPlayer(plr)
    if tracerFrames[plr] then return end
    local f = safeNew("Frame")
    if not f then return end
    f.Name = "SXYNA_Tracer"
    f.AnchorPoint = Vector2.new(0.5, 0.5)
    f.Size = UDim2.new(0, 1, 0, 2)
    f.BackgroundColor3 = tracerColor
    f.BorderSizePixel = 0
    f.Rotation = 0
    f.Visible = false
    f.Parent = tracerFolder
    tracerFrames[plr] = f
end

-- remove ESP / adorns / tracer
local function removeESPForPlayer(plr)
    if espGuis[plr] then
        pcall(function() espGuis[plr].billboard:Destroy() end)
        espGuis[plr] = nil
    end
    if boxAdorns[plr] then
        pcall(function() boxAdorns[plr]:Destroy() end)
        boxAdorns[plr] = nil
    end
    if tracerFrames[plr] then
        pcall(function() tracerFrames[plr]:Destroy() end)
        tracerFrames[plr] = nil
    end
end

Players.PlayerRemoving:Connect(removeESPForPlayer)

-- Utility: compute screen position and onScreen
local function worldToScreen(pos)
    if not Camera then Camera = Workspace.CurrentCamera end
    local p, onScreen = Camera:WorldToViewportPoint(pos)
    return Vector2.new(p.X, p.Y), onScreen
end

-- Get closest player by 3D distance to local hrp
local function getClosestPlayerByDistance()
    local best, bestDist = nil, math.huge
    local myPos = (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")) and LocalPlayer.Character.HumanoidRootPart.Position or (Camera and Camera.CFrame.Position or Vector3.new(0,0,0))
    for _,plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChildOfClass("Humanoid") then
            local hrp = plr.Character.HumanoidRootPart
            local dist = (hrp.Position - myPos).Magnitude
            if dist < bestDist then best = plr bestDist = dist end
        end
    end
    return best
end

-- Update loop: refresh ESP, boxes, tracers, FOV UI, and handle aimbot/point-at
RunService.RenderStepped:Connect(function()
    if not Camera or not Camera.Parent then Camera = Workspace.CurrentCamera end
    -- Update FOV UI color & size
    fovFrame.Size = UDim2.new(0, fovRadius*2, 0, fovRadius*2)
    fovStroke.Color = fovColor
    fovFrame.Visible = fovCircleEnabled

    -- iterate players
    for _,plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer then
            local char = plr.Character
            if char and char.Parent then
                local head = char:FindFirstChild("Head")
                local hrp = char:FindFirstChild("HumanoidRootPart")
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                if head and hrp and humanoid then
                    -- ensure GUIs/adorn exist if enabled
                    if espEnabled then
                        createESPForPlayer(plr)
                    else
                        removeESPForPlayer(plr)
                    end

                    if boxEspEnabled and espEnabled then
                        createBoxForPlayer(plr)
                    else
                        if boxAdorns[plr] then removeESPForPlayer(plr) end
                    end

                    if tracersEnabled and espEnabled then createTracerForPlayer(plr) end

                    -- update billboard text
                    if espGuis[plr] then
                        local cache = espGuis[plr]
                        cache.name.TextColor3 = nameColor
                        cache.dist.TextColor3 = distanceColor
                        cache.name.Text = plr.Name
                        cache.name.Visible = nameEspEnabled
                        if distanceEspEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                            local myPos = LocalPlayer.Character.HumanoidRootPart.Position
                            local dist = math.floor((hrp.Position - myPos).Magnitude)
                            cache.dist.Text = "["..tostring(dist).."m]"
                            cache.dist.Visible = true
                        else
                            cache.dist.Visible = false
                        end
                    end

                    -- update box adorn (size based on character)
                    if boxAdorns[plr] then
                        local box = boxAdorns[plr]
                        local humanoid = char:FindFirstChildOfClass("Humanoid")
                        local height = math.max(2, humanoid and humanoid.HipHeight + 1.5 or 3)
                        box.Size = Vector3.new(2, height, 1)
                        box.Color3 = boxColor
                    end

                    -- update tracer frame
                    if tracerFrames[plr] then
                        local screenPos, onScreen = worldToScreen(hrp.Position)
                        local view = Camera.ViewportSize
                        local startX, startY = view.X/2, view.Y -- bottom center
                        if onScreen and espEnabled and tracersEnabled then
                            local dx = screenPos.X - startX
                            local dy = screenPos.Y - startY
                            local length = math.sqrt(dx*dx + dy*dy)
                            local middleX = (startX + screenPos.X) / 2
                            local middleY = (startY + screenPos.Y) / 2
                            local frame = tracerFrames[plr]
                            frame.Size = UDim2.new(0, math.max(2, length), 0, 2)
                            frame.Position = UDim2.new(0, middleX, 0, middleY)
                            frame.Rotation = math.deg(math.atan2(dy, dx))
                            frame.BackgroundColor3 = tracerColor
                            frame.Visible = true
                        else
                            tracerFrames[plr].Visible = false
                        end
                    end
                else
                    -- no valid character
                    removeESPForPlayer(plr)
                end
            else
                -- player has no character
                removeESPForPlayer(plr)
            end
        end
    end

    -- FOV follows mouse (centered)
    if fovCircleEnabled then
        local mpos = UserInputService:GetMouseLocation()
        local viewport = Camera.ViewportSize
        local x = math.clamp(mpos.X, 0, viewport.X)
        local y = math.clamp(mpos.Y, 0, viewport.Y)
        fovFrame.Position = UDim2.new(0, x, 0, y)
    end

    -- AIMBOT
    if aimbotEnabled then
        -- find closest player within FOV (if required)
        local candidate = nil
        if aimbotWithinFOVOnly and fovCircleEnabled then
            local mpos = UserInputService:GetMouseLocation()
            local bestDist = math.huge
            for _,plr in ipairs(Players:GetPlayers()) do
                if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("Head") then
                    local head = plr.Character.Head
                    local screenPos, onScreen = worldToScreen(head.Position)
                    if onScreen then
                        local d = (screenPos - mpos).Magnitude
                        if d <= fovRadius and d < bestDist then
                            bestDist = d
                            candidate = plr
                        end
                    end
                end
            end
        else
            candidate = getClosestPlayerByDistance()
        end

        if candidate and candidate.Character and candidate.Character:FindFirstChild("Head") then
            local head = candidate.Character.Head
            -- snap camera to look at head (instant)
            pcall(function()
                Camera.CFrame = CFrame.new(Camera.CFrame.Position, head.Position)
            end)
        end
    end

    -- POINT AT SELECTED
    if pointAtEnabled and SelectedPlayer and SelectedPlayer.Character and LocalPlayer.Character then
        local myHRP = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        local targetHRP = SelectedPlayer.Character:FindFirstChild("HumanoidRootPart")
        if myHRP and targetHRP then
            myHRP.CFrame = CFrame.new(myHRP.Position, Vector3.new(targetHRP.Position.X, myHRP.Position.Y, targetHRP.Position.Z))
        end
    end
end)

-- --------------------
-- Visual toggles & controls (UI)
-- --------------------
-- ESP Master Switch toggles all ESP options on/off at once.
VisualTab:CreateToggle({Name="ESP Master Switch", CurrentValue=false, Callback=function(state)
    espEnabled = state
    if state then
        -- enabling master turns on all esp features
        tracersEnabled = true
        nameEspEnabled = true
        distanceEspEnabled = true
        boxEspEnabled = true
    else
        -- disabling master turns off all esp features and removes visuals
        tracersEnabled = false
        nameEspEnabled = false
        distanceEspEnabled = false
        boxEspEnabled = false
        -- cleanup
        for p,_ in pairs(espGuis) do removeESPForPlayer(p) end
    end
end})

VisualTab:CreateToggle({Name="Tracers", CurrentValue=false, Callback=function(state) tracersEnabled = state if not state then for p,_ in pairs(tracerFrames) do if tracerFrames[p] then tracerFrames[p].Visible = false end end end end})
VisualTab:CreateToggle({Name="Name ESP", CurrentValue=false, Callback=function(state) nameEspEnabled = state end})
VisualTab:CreateToggle({Name="Distance ESP", CurrentValue=false, Callback=function(state) distanceEspEnabled = state end})
VisualTab:CreateToggle({Name="Box ESP", CurrentValue=false, Callback=function(state) boxEspEnabled = state if not state then for p,_ in pairs(boxAdorns) do if boxAdorns[p] then pcall(function() boxAdorns[p]:Destroy() end) boxAdorns[p]=nil end end end end})
VisualTab:CreateToggle({Name="Aimbot", CurrentValue=false, Callback=function(state) aimbotEnabled = state end})
VisualTab:CreateToggle({Name="Point At Selected", CurrentValue=false, Callback=function(state) pointAtEnabled = state end})
VisualTab:CreateToggle({Name="Show FOV Circle", CurrentValue=false, Callback=function(state) fovCircleEnabled = state if not state then fovFrame.Visible = false end end})
VisualTab:CreateSlider({Name="FOV Radius", Range={50,500}, Increment=5, CurrentValue=fovRadius, Callback=function(val) fovRadius = val fovFrame.Size = UDim2.new(0, val*2, 0, val*2) end})

-- Night Vision (toggle)
local nightVisionEffect = nil
VisualTab:CreateToggle({
    Name="Night Vision",
    CurrentValue=false,
    Callback=function(state)
        if state then
            if not nightVisionEffect then
                nightVisionEffect = Instance.new("ColorCorrectionEffect")
                nightVisionEffect.TintColor = Color3.fromRGB(0,255,0)
                nightVisionEffect.Parent = Lighting
            end
        else
            if nightVisionEffect then
                pcall(function() nightVisionEffect:Destroy() end)
                nightVisionEffect = nil
            end
        end
    end
})

-- Rainbow Character
local rainbowEnabled = false
VisualTab:CreateToggle({Name="Rainbow Character", CurrentValue=false, Callback=function(state)
    rainbowEnabled = state
    if state then
        task.spawn(function()
            while rainbowEnabled do
                if LocalPlayer.Character then
                    for _,v in ipairs(LocalPlayer.Character:GetChildren()) do
                        if v:IsA("BasePart") then
                            v.Color = Color3.fromHSV((tick() % 5)/5, 1, 1)
                        end
                    end
                end
                task.wait(0.2)
            end
        end)
    end
end})

-- SpinBot
local spinEnabled = false
VisualTab:CreateToggle({Name="SpinBot", CurrentValue=false, Callback=function(state)
    spinEnabled = state
    if state then
        task.spawn(function()
            while spinEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(20), 0)
                end
                task.wait(0.05)
            end
        end)
    end
end})

-- ================================
-- WORLD TAB
-- ================================
local WorldTab = Window:CreateTab("World",6034509993)
WorldTab:CreateSection("World Tools")
WorldTab:CreateSlider({Name="Gravity", Range={0,1000}, Increment=50, CurrentValue=workspace.Gravity, Callback=function(val) workspace.Gravity=val end})
WorldTab:CreateButton({Name="Delete All Seats", Callback=function() for _,v in ipairs(workspace:GetDescendants()) do if v:IsA("Seat") or v:IsA("VehicleSeat") then pcall(function() v:Destroy() end) end end end})

local ClickTPEnabled=false
WorldTab:CreateToggle({Name="Click TP", CurrentValue=false, Callback=function(state) ClickTPEnabled=state end})
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if ClickTPEnabled and input.UserInputType == Enum.UserInputType.MouseButton1 then
        local mouse = LocalPlayer:GetMouse()
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and mouse and mouse.Hit then
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(mouse.Hit.p + Vector3.new(0,3,0))
        end
    end
end)

-- ================================
-- UTILITY TAB
-- ================================
local UtilityTab = Window:CreateTab("Utility",6031280882)
UtilityTab:CreateSection("Utility")
UtilityTab:CreateButton({Name="Rejoin", Callback=function() TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, LocalPlayer) end})

UtilityTab:CreateButton({Name="Server Hop", Callback=function()
    local servers = {}
    local httpFunc = nil
    if syn and syn.request then httpFunc = syn.request end
    if http_request and not httpFunc then httpFunc = http_request end
    if request and not httpFunc then httpFunc = request end

    if not httpFunc then
        Rayfield:Notify({Title="SXYNA", Content="Server hop unavailable: no http function", Duration=4, Image="code"})
        return
    end

    local ok, res = pcall(function()
        return httpFunc({Url = "https://games.roblox.com/v1/games/"..tostring(game.PlaceId).."/servers/Public?sortOrder=Asc&limit=100"})
    end)
    if not ok or not res or not res.Body then
        Rayfield:Notify({Title="SXYNA", Content="Server hop failed (http)", Duration=4, Image="code"})
        return
    end

    local success, decoded = pcall(function() return HttpService:JSONDecode(res.Body) end)
    if not success or not decoded or not decoded.data then
        Rayfield:Notify({Title="SXYNA", Content="Server hop failed (parse)", Duration=4, Image="code"})
        return
    end

    for _,v in pairs(decoded.data) do
        if type(v) == "table" and v.playing and v.maxPlayers and v.id and v.id ~= game.JobId then
            if v.playing < v.maxPlayers then table.insert(servers, v.id) end
        end
    end

    if #servers > 0 then
        TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1,#servers)], LocalPlayer)
    else
        Rayfield:Notify({Title="SXYNA", Content="No suitable servers found", Duration=4, Image="code"})
    end
end})

UtilityTab:CreateButton({Name="Copy Selected Username", Callback=function() if SelectedPlayer then pcall(function() setclipboard(SelectedPlayer.Name) end) end end})
UtilityTab:CreateButton({Name="Copy Selected UserId", Callback=function() if SelectedPlayer then pcall(function() setclipboard(tostring(SelectedPlayer.UserId)) end) end end})

local chatSpyEnabled = false
UtilityTab:CreateToggle({Name="Chat Spy", CurrentValue=false, Callback=function(state) chatSpyEnabled = state end})

-- Hook player chat safely
local chattedHooked = {}
local function hookPlayerChat(plr)
    if chattedHooked[plr] then return end
    chattedHooked[plr] = true
    plr.Chatted:Connect(function(msg)
        if chatSpyEnabled then
            print("[CHAT SPY] "..plr.Name..": "..tostring(msg))
        end
    end)
end
for _,plr in ipairs(Players:GetPlayers()) do hookPlayerChat(plr) end
Players.PlayerAdded:Connect(function(plr) hookPlayerChat(plr) end)

-- ================================
-- SETTINGS TAB (Destroy + ESP color pickers only)
-- ================================
local SettingsTab = Window:CreateTab("Settings",4483362458)
SettingsTab:CreateSection("Settings")
SettingsTab:CreateButton({Name="Destroy Interface?", Callback=function()
    for i=5,1,-1 do Rayfield:Notify({Title="SXYNA",Content="Destroying Interface In "..i,Duration=1,Image="code"}) wait(1) end
    Rayfield:Notify({Title="SXYNA",Content="GoodBye!",Duration=4,Image="code"})
    wait(1)
    -- cleanup GUI/adornments
    for pl,_ in pairs(espGuis) do removeESPForPlayer(pl) end
    for pl,_ in pairs(tracerFrames) do pcall(function() tracerFrames[pl]:Destroy() end) end
    if sgui then pcall(function() sgui:Destroy() end) end
    Rayfield:Destroy()
end})

SettingsTab:CreateSection("ESP Colors (Settings)")
SettingsTab:CreateColorPicker({Name="Tracer Color (Settings)", Color=tracerColor, Callback=function(c) tracerColor = c end})
SettingsTab:CreateColorPicker({Name="Name Color (Settings)", Color=nameColor, Callback=function(c) nameColor = c end})
SettingsTab:CreateColorPicker({Name="Distance Color (Settings)", Color=distanceColor, Callback=function(c) distanceColor = c end})
SettingsTab:CreateColorPicker({Name="Box Color (Settings)", Color=boxColor, Callback=function(c) boxColor = c end})
SettingsTab:CreateColorPicker({Name="FOV Color (Settings)", Color=fovColor, Callback=function(c) fovColor = c fovStroke.Color = c end})

-- End of script
